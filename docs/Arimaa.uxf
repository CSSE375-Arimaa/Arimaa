<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="13.3">
  <zoom_level>10</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>170</x>
      <y>170</y>
      <w>520</w>
      <h>920</h>
    </coordinates>
    <panel_attributes>game::Game
--
~boards = new ArrayList&lt;BoardState&gt;(): ArrayList&lt;BoardState&gt;
+currentBoard = null: BoardState
~moveTimer = 0: int
~p1TimeBank = 0: int
~p2TimeBank = 0: int
~turnCounter = 0: int
~p1Name = "Player1": String
~p2Name = "Player2": String
-winner = 0: int
-numMoves = 4: int
-playerTurn = 1: int
-isPushPull: boolean
~p1Pieces: HashMap&lt;Character, Integer&gt;
~p2Pieces: HashMap&lt;Character, Integer&gt;
--
+Game(BoardState b): ctor
+Game(): ctor
+configurePieceInventory(): void
+placePiece(int row, int column, char piece): boolean
+removePiece(int row, int column): boolean
+getSpace(int row, int column): Piece
+move(int row, int column, int dir): boolean
-isValidMoveFromSquare(int row, int column): boolean
-isValidMoveSquare(int row, int column): boolean
-endMove(): void
-checkWin(): void
-checkDeaths(int row, int col): void
-checkFriendlyAdjacent(int row, int col): boolean
-checkStrongerAdjacent(int row, int col): boolean
-checkStrong(Piece one, Piece two): boolean
-switchPiece(int row1, int column1, int row2, int column2): void
+push(int row, int column, int dir1, int dir2): boolean
-pieceCanPush(Piece pushingPiece, Piece pushedPiece): boolean
-isValidSquareToPushFrom(int row, int column): boolean
+pull(int row1, int column1, int row2, int column2, int direction1): boolean
-tryPull(Piece space, Piece space2, int row1, int column1, int direction1): boolean
-isValidSquaretoPullFrom(int row1, int column1, int row2, int column2): boolean
+getDirection(int row1, int column1, int row2, int column2): int
+undoMove(): void
+loadFile(Scanner scanner): boolean
+saveFile(FileWriter fw): boolean
+getTurnCounter(): int
+getP1Name(): String
+getP2Name(): String
+setWinner(int winner): void
+getNumMoves(): int
+getTurnTimer(): int
+getWinner(): int
+getPlayerTurn(): int
+setPlayerTurn(int playerTurn): void
+getP1Pieces(): HashMap&lt;Character, Integer&gt;
+getP2Pieces(): HashMap&lt;Character, Integer&gt;
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>700</x>
      <y>170</y>
      <w>340</w>
      <h>470</h>
    </coordinates>
    <panel_attributes>game::GUI
--
-p1Name: String
-p2Name: String
-activeFrames: ArrayList&lt;JFrame&gt;
-game: Game
-gameBoardPanel = null: ImagePanel
-boardPieces: ImagePanel[][]
-p1TextField: JTextField
-p2TextField: JTextField
-timerComboBox: JComboBox&lt;Integer&gt;
-moveCountLabel: JLabel
-turnCountLabel: JLabel
-turnIndicatorLabel: JLabel
-timerLabel: JLabel
-timer: TimePanel
--
+GUI(): ctor
+main(String[] args): void
+getP1name(): String
+setP1name(String p1name): void
+getP2name(): String
+setP2name(String p2name): void
+getActiveFrames(): ArrayList&lt;JFrame&gt;
+setActiveFrames(ArrayList&lt;JFrame&gt; frames): void
-renderInitialBoard(): void
#renderBoard(): void
+createWinWindow(): void
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1050</x>
      <y>170</y>
      <w>290</w>
      <h>360</h>
    </coordinates>
    <panel_attributes>game::Piece
--
-type: PieceType
-image: Image
-owner: Owner
-rank: int
--
+Piece(char c): ctor
+Piece(PieceType t, Image i, Owner o): ctor
-createP2Piece(char c): void
-createP1Piece(char c): void
+getType(): PieceType
+setType(PieceType type): void
+getImage(): Image
+setImg(Image img): void
+getOwner(): Owner
+setOwner(Owner owner): void
+getRank(): int
+setRank(int rank): void
+equals(Object p2): boolean
+isStrongerThan(Piece p2): boolean
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>170</x>
      <y>1100</y>
      <w>360</w>
      <h>230</h>
    </coordinates>
    <panel_attributes>game::BoardState
--
-boardArray = new char[8][8]: char[][]
-turnNumber: int
--
+BoardState(char[][] map, int turnNumber): ctor
+getBoardArray(): char[][]
+setBoardArray(char[][] boardArray): void
+setBoardSpace(int row, int column, String piece): void
+getTurnNumber(): int
+setTurnNumber(int turnNumber): void
+incrementTurn(): void
+clone(): BoardState
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>540</x>
      <y>1100</y>
      <w>430</w>
      <h>180</h>
    </coordinates>
    <panel_attributes>game::TimePanel
--
-timerLabel: JLabel
~timer: Timer
~playerTurn: int
--
+TimePanel(GUI gui, Game game, int startTime, JLabel label): ctor
+update(int s, int minute): void
+getTimerLabel(): JLabel
+setTimerLabel(JLabel timerLabel): void
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1050</x>
      <y>550</y>
      <w>340</w>
      <h>320</h>
    </coordinates>
    <panel_attributes>game::ImagePanel
--
-serialVersionUID = -7315460075240330922L: long
-img: Image
-row: int
-column: int
--
+ImagePanel(String img): ctor
+ImagePanel(Image img): ctor
+createWinWindow(): void
+paintComponent(Graphics g): void
+setRow(int row): void
+getRow(): int
+setColumn(int column): void
+getColumn(): int
+getPixelX(): int
+getPixelY(): int
--
</panel_attributes>
    <additional_attributes/>
  </element>
</diagram>
